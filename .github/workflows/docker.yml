name: Release and Docker Publish

on:
  push:
    branches:
      - dev
      - staging
      - main
    tags:
      - 'v*.*.*'      # Production release
      - 'v*.*.*-beta' # Staging release
      - 'v*.*.*-dev'  # Development release

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Lint Commit Messages
        run: |
          npx commitlint --from $(git rev-list --max-parents=0 HEAD) --to HEAD

      - name: Run semantic-release
        id: set-version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=$(npx semantic-release --dry-run | grep -Eo 'The next release version is [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $NF}')
          if [[ -z "$VERSION" ]]; then
            echo "No new version detected. Exiting..."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"
          npx semantic-release

  docker:
    runs-on: ubuntu-latest
    needs: release
    outputs:
      tag: ${{ steps.set-tags.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Environment Variables
        id: set-tags
        run: |
          VERSION=${{ needs.release.outputs.version }}
          REF_NAME="${{ github.ref_name }}"
          
          if [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            TAG="v$VERSION-dev.${{ github.run_number }}"
            LATEST_TAG="dev-latest"
            APP_ENV="development"
          elif [[ "${{ github.ref }}" == refs/heads/staging ]]; then
            TAG="v$VERSION-beta.${{ github.run_number }}"
            LATEST_TAG="beta-latest"
            APP_ENV="staging"
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            TAG="v$VERSION"
            LATEST_TAG="latest"
            APP_ENV="production"
          else
            TAG="v$VERSION-unknown"
            LATEST_TAG="unknown-latest"
            APP_ENV="unknown"
          fi

          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "APP_ENV=$APP_ENV" >> $GITHUB_ENV

      - name: Show GitHub Ref and Environment Variables
        run: |
          echo "GitHub Ref: $GITHUB_REF"
          echo "GitHub Ref Name: $GITHUB_REF_NAME"
          echo "Environment Variables: "
          cat $GITHUB_ENV

      - name: Build and Push Docker Image (Semantic Version)
        run: |
          docker build --build-arg ENV=${{ env.APP_ENV }} -t satriagitu/go-crud-postgres:${{ env.TAG }} .
          docker push satriagitu/go-crud-postgres:${{ env.TAG }}

      - name: Build and Push Docker Image (Latest Tag)
        run: |
          docker tag satriagitu/go-crud-postgres:${{ env.TAG }} satriagitu/go-crud-postgres:${{ env.LATEST_TAG }}
          docker push satriagitu/go-crud-postgres:${{ env.LATEST_TAG }}

  update-argocd:
    runs-on: ubuntu-latest
    needs: docker
    env:
      TAG: ${{ needs.docker.outputs.tag }}
    steps:
      - name: Checkout Argo CD Config Repository
        uses: actions/checkout@v3
        with:
          repository: insanilah/go-crud-postgres-argocd-config
          token: ${{ secrets.ARGOCD_REPO_TOKEN }}

      - name: Update Image Version in ArgoCD Config
        run: |
          echo "TAG=${{ env.TAG }}"
          sed -i 's|image: satriagitu/go-crud-postgres:.*|image: satriagitu/go-crud-postgres:${{ env.TAG }}|' dev/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add dev/deployment.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update image version to ${{ env.TAG }}"
            git push
          fi
