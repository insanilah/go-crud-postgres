name: Release and Docker Publish

on:
  push:
    branches:
      - dev
      - staging
      - main
    tags:
      - 'v*.*.*'      # Production release
      - 'v*.*.*-beta' # Staging release
      - 'v*.*.*-dev'  # Development release

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Lint Commit
      - name: Lint Commit Messages
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }}
      
        # Run semantic-release
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=$(npx semantic-release --dry-run 2>&1 | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERS: $VERSION"

  docker:
    runs-on: ubuntu-latest
    needs: release # Menunggu job `release` selesai

    steps:
      # Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Set environment variables based on branch/tag
      - name: Set Environment Variables
        id: get-env
        run: |
          REF_NAME="${{ github.ref_name }}"
          if [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            TAG="v${{ needs.release.outputs.version }}-${REF_NAME}"
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "APP_ENV=development" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/staging ]]; then
            TAG="v${{ needs.release.outputs.version }}-${REF_NAME}"
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "APP_ENV=staging" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            TAG="v${VERSION}"
            echo "TAG=$TAG" >> $GITHUB_ENV
            echo "APP_ENV=production" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
            echo "APP_ENV=dev" >> $GITHUB_ENV
          fi
        env:
          VERSION: ${{ env.VERSION }}

      - name: Show GitHub Ref and Environment Variables
        run: |
          echo "GitHub Ref: $GITHUB_REF"
          echo "GitHub Ref Name: $GITHUB_REF_NAME"
          echo "Environment Variables: "
          cat $GITHUB_ENV

      # Build and Push Docker Image with Semantic Version
      - name: Build and Push Docker Image (Semantic Version)
        run: |
          docker build --build-arg ENV=${{ env.APP_ENV }} -t satriagitu/go-crud-postgres:${{ env.TAG }} .
          docker push satriagitu/go-crud-postgres:${{ env.TAG }}

      # Build and Push Docker Image with 'latest' or branch-specific tag
      - name: Build and Push Docker Image (Latest or Branch Tag)
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          docker build --build-arg ENV=${{ env.APP_ENV }} -t satriagitu/go-crud-postgres:latest .
          docker push satriagitu/go-crud-postgres:latest
